#include "U8glib.h"

////////////////////////////////////
#include <Wire.h>
#include <LSM6.h>
#define RxD         7
#define TxD         6

#define blueToothSerial Serial2

LSM6 imu;
int ins=0;
int time1 = 0;
int time2 = 0;
int time_diff = 0;

char report[80];
/////////////////////////////////////////

U8GLIB_ST7920_128X64_4X u8g(13, 11, 10);
int num; 
//int block[20][10];
// block Ϊ����ṹ������ݸ�ʽ��
struct block{
  int T_0[4][4] ;
  int block_pos_x;
  int block_pos_y;
};


// background Ϊ�����ṹ������ݸ�ʽ����
struct background{
  int background[10][20];
};

struct background bg;
struct block T_0;

//int block_pos_x ;
//int block_pos_y ;

int T_i ;
int T_j ;


//��ʼ��T_B[7][4][4]������һ���洢7�಻ͬ������������飻
int T_B[7][4][4];

int T_1[4][4] ={{0,0,0,0},
                  {0,0,0,0},
                  {1,1,1,1},
                  {0,0,0,0}};
            

int T_2[4][4] ={{0,0,0,0},
                  {0,1,0,0},
                  {0,1,1,1},
                  {0,0,0,0}};
    

int T_3[4][4] ={{0,0,0,0},
                  {0,0,1,0},
                  {1,1,1,0},
                  {0,0,0,0}};
                  

int T_4[4][4] ={{0,0,0,0},
                  {0,0,1,0},
                  {0,1,1,1},
                  {0,0,0,0}};
                  
                 

int T_5[4][4] ={{0,0,0,0},
                  {0,0,1,1},
                  {0,1,1,0},
                  {0,0,0,0}};
                  
      

int T_6[4][4] ={{0,0,0,0},
                  {1,1,0,0},
                  {0,1,1,0},
                  {0,0,0,0}};
                  
 
int T_7[4][4] ={{0,0,0,0},
                  {0,1,1,0},
                  {0,1,1,0},
                  {0,0,0,0}};
                
               

// T_0[4][4] �ǿհ�4*4���飬��һ���ã�
int T_00[4][4] ={{0,0,0,0},
                  {0,0,0,0},
                  {0,0,0,0},
                  {0,0,0,0}};
                  
//��������У�1024����
int line[1024];  





////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////////////////

void T_main_loop();
int check_if_gameover(struct background bg);
void clear_line(struct background *bg);
void to_bg(struct block T, struct background *bg);
int check_if_end(struct block T ,struct background bg);
void Tmove (struct block *b , struct background *bg,int ins);
void T_print(struct block T,struct background bg);
void gen_block(int line[]);
void gameover();
void draw_block(int block[][10]);
void setupBlueToothConnection();


///////////////////////////////////////////////////////////////////////////////////////////////////////////
void setupBlueToothConnection()
{
    blueToothSerial.begin(38400);                           // Set BluetoothBee BaudRate to default baud rate 38400
    blueToothSerial.print("\r\n+STWMOD=0\r\n");             // set the bluetooth work in slave mode
    blueToothSerial.print("\r\n+STNA=74LS96\r\n");    // set the bluetooth name as "SeeedBTSlave"
    blueToothSerial.print("\r\n+STOAUT=1\r\n");             // Permit Paired device to connect me
    blueToothSerial.print("\r\n+STPIN =0000\r\n"); 
    blueToothSerial.print("\r\n+STAUTO=0\r\n");   // Auto-connection should be forbidden here
    delay(2000);                                            // This delay is required.
    blueToothSerial.print("\r\n+INQ=1\r\n");                // make the slave bluetooth inquirable
    Serial.println("The slave bluetooth is inquirable!");
    delay(2000);                                            // This delay is required.
    blueToothSerial.flush();
}

void draw_block(int block[][10])
{//draw blocks 10*20
  int block_x , block_y;
  
  for (block_x = 0 ; block_x < 20 ; block_x ++)
    for (block_y = 0 ; block_y < 10 ; block_y ++)
    {
      if (block[block_x][block_y] == 1)
        u8g.drawFrame( 6*block_x+7 , 6*block_y+2, 6 , 6);
    }

}

void gameedge(void){//lines
  //U8GLIB::u8g.drawLine(u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
  u8g.drawLine(7,62,127,62);
  u8g.drawLine(7,63,127,63);
  u8g.drawLine(7,1,126,1);
  u8g.drawLine(7,0,126,0);
  u8g.drawLine(7,0,7,63);
  u8g.drawLine(127,0,127,63);
}

void tetrismain(){

  for (T_i = 0 ; T_i <= 3 ; T_i ++){
    for (T_j = 0 ; T_j <= 3 ; T_j ++){
      T_B[0][T_i][T_j] = T_1[T_i][T_j];
//      printf("%d +",T_B[0][T_i][T_j]);
    }
//    printf("\n");
  }            

  for (T_i = 0 ; T_i <= 3 ; T_i ++){
    for (T_j = 0 ; T_j <= 3 ; T_j ++){
      T_B[1][T_i][T_j] = T_2[T_i][T_j];
    }
  } 
  for (T_i = 0 ; T_i <= 3 ; T_i ++){
    for (T_j = 0 ; T_j <= 3 ; T_j ++){
      T_B[2][T_i][T_j] = T_3[T_i][T_j];
    }
  }                   

  for (T_i = 0 ; T_i <= 3 ; T_i ++){
    for (T_j = 0 ; T_j <= 3 ; T_j ++){
      T_B[3][T_i][T_j] = T_4[T_i][T_j];
    }
  }  
  
  for (T_i = 0 ;T_i <= 3 ; T_i ++){
    for (T_j = 0 ; T_j <= 3 ; T_j ++){
      T_B[4][T_i][T_j] = T_5[T_i][T_j];
    }
  }             
  
  for (T_i = 0 ; T_i <= 3 ; T_i ++){
    for (T_j = 0 ; T_j <= 3 ; T_j ++){
      T_B[5][T_i][T_j] = T_6[T_i][T_j];
    }
  }                   
                 
  for (T_i = 0 ; T_i <= 3 ; T_i ++){
    for (T_j = 0 ; T_j <= 3 ; T_j ++){
      T_B[6][T_i][T_j] = T_7[T_i][T_j];
    }
  }                    
                 
      for (T_i = 0 ; T_i <= 1023 ; T_i ++){
    
      line[T_i] = random(0, 7); 
      Serial.print( line[T_i]);
    
    }   
  
//  gen_block(line,&T_0);
//  T_print(T_0,bg);
//  printf("===============================\n");
//  for (T_i = 0 ; T_i <= 3 ; T_i ++){
//    for (T_j = 0 ; T_j <= 3 ; T_j ++){
//      printf("%d +",T_0.T_0[T_i][T_j]);
//    }
//    printf("\n");
//  }                    
//              
//     for (T_i = 0 ; T_i <= 30 ; T_i ++){Serial.print(line[T_i]);}
//    T_main_loop() ;  
  
       
}


/*
ox  gen_block()     ���ɷ��飬��ȡ����� 
x T_print ()      ˢ����Ļ�� 
ox  move()    �ƶ����飻
ox  check_if_end()    ����Ƿ񴥵��ƶ���
ox  to_bg()     ʹ�����������
ox  clear_line()    ��鲢��ȥ���������У�
ox  check_if_gameover() ����Ƿ���Ϸ������
x gameover()      ��ʾ��Ϸ�������棻 

  ins     ����Ĳ����� 
  ch_to_ins()     C���Բ����ã�char to instruction��
   
*/

void T_main_loop(){
  int xi,xj;
  int T_i ;
  int T_j ;
  
  char c;
  Serial.print("num = ");
  Serial.println(num);

//  for(xj = 0; xj <= 19; xj ++ ){
//      for(xi = 0; xi <= 9; xi ++ ){
//    
//       Serial.print(bg.background[xi][xj]);
//    
//      }
//    
//    Serial.print("\n");
//    }

//Serial.print("T_0:\n");
//
// for(xj = 0; xj <=3; xj ++ ){
//      for(xi = 0; xi <= 3; xi ++ ){
//    
//       Serial.print(T_B[line[num]][xj][xi]);
//    
//      }
//    
//    Serial.print("\n");
//    }
//Serial.println(T_0.block_pos_x);
//Serial.println(T_0.block_pos_y);
  if (check_if_gameover(bg) == 1){gameover();}
  
  if(num == 0){
//
//  for (T_i = 0 ; T_i <= 3 ; T_i ++){
//    for (T_j = 0 ; T_j <= 3 ; T_j ++){
//      T_0.T_0[T_i][T_j] = T_B[line[num]][T_i][T_j];
//
//  }
//  T_0.block_pos_x = -1;
//  T_0.block_pos_y = -0;
//  num++;
//    T_print(T_0,bg);
//    
//   }
    gen_block(line);
     T_print(T_0,bg);
  }
    
//  int ins;
  
//  while(check_if_gameover(bg) != 1){
//    gen_block(line,&T_0);
//    T_print(T_0,bg);
//    while(1){ 
      if (  ins != 0  ||  Serial.available() != 0/*��������,ʱ���������*/){
        c = Serial.read();
        
          if (c == 'w'){ins = 1;}
          else if (c == 's'){ins = 2;}
          else if (c == 'a'){ins = 3;}
          else if (c == 'd'){ins = 4;}

//          Serial.println(ins);
          

        if (check_if_end(T_0,bg) == 1 && ins == 2){
          to_bg(T_0,&bg);
          clear_line(&bg);
          ins = 0;
          gen_block(line);
          T_print(T_0,bg);
         // break;
        }
        else{  Tmove(&T_0,&bg,ins);
          T_print(T_0,bg);
           ins = 0;
        //printf("%d",ins); 
        }
      
//    }
  
  }
//  if (check_if_gameover(bg) == 1){gameover();}
    

}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



int check_if_gameover(struct background bg){
  int i,j;
  int flag = 0;
  for (j = 19; j>= 5;j--){
    flag = 0;
    for(i = 0; i <= 9; i++){
      flag = flag + bg.background[i][j];
    }
    if (flag == 0){
//      Serial.print(flag);
      return 0;
     }
  }
  return 1;
  
}


/////////////////////////////////////////////////////////////


void clear_line(struct background *bg){
  int i,j;
  int i2,j2;
  int check_if_all_1;
  for (j = 19; j >= 0 ; ){
    check_if_all_1 = 1;
    for(i = 0; i <= 9 ;i++){ 
      if ( bg->background[i][j] != 1){
        check_if_all_1 = 0;
        break;
      }
    }
//    printf("%d",check_if_all_1);
    if (check_if_all_1 == 1){
    
      for (i2 = 9; i2 >= 0 ;i2--){
        for (j2 = j; j2 >= 1 ;j2--){
          bg->background[i2][j2] = bg->background[i2][j2 - 1];
        }
      } 
    
    }
    else{j --;}
    
    
  }
  

}


////////////////////////////////////////////////////


void to_bg(struct block T, struct background *bg){
  int i,j;
  for(i = 0;i <= 3 ; i++){
    for(j = 0;j <= 3 ; j++){
      if(bg->background[T.block_pos_x + i][T.block_pos_y + j] == 0 ){bg->background[T.block_pos_x + i][T.block_pos_y + j] = T.T_0[i][j];}
    } 
  }
}

//////////////////////////////////////////////////////////


int check_if_end(struct block T ,struct background bg){
  int i,j;
  for(i = 0; i <= 3 ;i++ ){
    for(j = 0; j <= 3 ;j++ ){
      if (T.T_0[i][j] == 1 ){
        if (T.block_pos_y + j >= 19 ){return 1;}
        if ( bg.background[T.block_pos_x + i][T.block_pos_y + j + 1] == 1){return 1;}
      }
    }
  }
  return 0;

}

///////////////////////////////////////////////////////////

void Tmove (struct block *b , struct background *bg,int ins){
  int i;
  int j;
  int temp[4][4];
  int i2;
  int j2;
  int x0;
  int y0; 
  
  x0 = b->block_pos_x;
  y0 = b->block_pos_y;
  
  
  for(i = 0 ; i <=  3 ; i ++){
    for(j = 0 ; j <=  3 ; j ++){
      temp[i][j] = b->T_0[i][j];
    }
  }

  switch (ins){
  
  case 1 :
    for(i = 0 ; i <=  3 ; i ++){
      for(j = 0 ; j <=  3 ; j ++){
        b->T_0[j][3 - i] = temp[i][j];
      }
    }
    break;
    
  case 2 : b->block_pos_y ++; break;
  case 3 : b->block_pos_x --; break;
  case 4 : b->block_pos_x ++; break;
  default :  break;
  }
  
  //����ƶ��Ƿ��ǺϷ��� 
  for(i = 0 ; i <=  3 ; i ++){
    for(j = 0 ; j <=  3 ; j ++){
      if( b->T_0[i][j] == 1 ){
        if (bg->background[b->block_pos_x + i][b->block_pos_y + j] == 1 || b->block_pos_x + i >= 10 || b->block_pos_x + i <= -1|| b->block_pos_y + j >= 20){ 
          
            for(i2 = 0 ; i2 <=  3 ; i2 ++){
              for(j2 = 0 ; j2 <=  3 ; j2 ++){
                b->T_0[i2][j2] = temp[i2][j2];
                b->block_pos_x = x0;
                b->block_pos_y = y0 ;
              }
            }
          
        } 
      }
    }
  }
  

}


////////////////////////////////////////////



/*

gamewin   ָ��Ϸ�������ʾ���������߿�û��������Ļ�� 

*/

void T_print(struct block T,struct background bg){
  int i,j;
  int gamewin[10][20];
  int inputwin[20][10];
  
  for (i = 0; i <= 9 ; i ++){
    for (j = 0; j <= 19 ; j ++){
      gamewin[i][j] = bg.background[i][j];
    }
  }  
  
  for (i = 0; i <= 3 ; i ++){
    for (j = 0; j <= 3 ; j ++){
      if (gamewin[T.block_pos_x + i][T.block_pos_y +j] == 0){gamewin[T.block_pos_x + i][T.block_pos_y +j] = T.T_0[i][j];}
    }
  }
//  C_print(gamewin);
//  system("cls"); 
  
  for (i = 0; i <= 9 ; i ++){
    for (j = 0; j <= 19 ; j ++){
      inputwin[j][i] = gamewin[i][j];
    }
  }  
//  Serial.print("print start");
  u8g.firstPage();
  do {
    draw_block(inputwin);
    gameedge();
//    s();
  } while( u8g.nextPage() );

  
//  printf("============\n");
//  for (j = 0; j <= 19; j++){
//    for (i = 0; i <= 9 ; i++){
//      if (gamewin[i][j] == 0 ){printf("��");}
//      else {printf("��");}
//    }
//    printf("\n");
//  }  
//  printf("============\n");
//  printf("x = %d,y = %d",T.block_pos_x,T.block_pos_y);
}

//void C_print(int win[][]){
//
//  int i,j;
//  for (j = 0; j <= 19; j++){
//    for (i = 0; i <= 9 ; i++){
//      if (win[i][j] == 0 ){printf(" ");}
//      else {printf("O");}
//    }
//    printf("\n");
//  }  
//}


////////////////////////////////////////

void gen_block(int line[] /*, struct block *T*/){
  int T_i ;
  int T_j ;
//  int ran;
//  static int num; 

  for (T_i = 0 ; T_i <= 3 ; T_i ++){
    for (T_j = 0 ; T_j <= 3 ; T_j ++){
      T_0.T_0[T_i][T_j] = T_B[line[num]][T_i][T_j];
//      printf("%d +",T->T_0[T_i][T_j]);
    }
//    printf("\n");
  }
  T_0.block_pos_x = 3;
  T_0.block_pos_y = -0;
  num++;
}

///////////////////////////////////////////////////

void gameover(){
  int i,j;
  
  Serial.print("hhhhhhhhhhhhhhhhhhhhhhhhhhhh\n");
  blueToothSerial.println("game over");
  blueToothSerial.print("score:");
  blueToothSerial.print(num);
  for(j = 0;j <= 19; j++){
    for(i = 0;i <= 9; i++){
      Serial.print(bg.background[i][j]);
    }
    Serial.print('\n');
  }
  
    while(1){;}
}

/////////////////////////////////////////////////

int ppp(char c){

//  switch (c){
//  
//  case 'w':return 1;
//  case 's':return 2;
//  case 'a':return 3;
//  case 'd':return 4;
////  default:return -1;
//  
//  }

  if (c = 'w'){return 1;}
  else if (c = 's'){return 2;}
  else if (c = 'a'){return 3;}
  else if (c = 'd'){return 4;}
  return 0;
}

void setup() {
  Serial.begin(9600);
  setupBlueToothConnection();
  if ( u8g.getMode() == U8G_MODE_R3G3B2 ) {
    u8g.setColorIndex(255); // white
  }
  else if ( u8g.getMode() == U8G_MODE_GRAY2BIT ) {
    u8g.setColorIndex(3); // max intensity
  }
  else if ( u8g.getMode() == U8G_MODE_BW ) {
    u8g.setColorIndex(1); // pixel on
  }
  else if ( u8g.getMode() == U8G_MODE_HICOLOR ) {
    u8g.setHiColorByRGB(255,255,255);
  }

//  Serial.begin(9600);
  Wire.begin();

  if (!imu.init())
  {
    Serial.println("Failed to detect and initialize IMU!");
    while (1);
  }
  imu.enableDefault();



//  gen_block(line,&T_0);
//  T_print(T_0,bg);
  
  tetrismain();

  
}

void loop() {

    
  imu.read();
  
  
  if(abs(imu.g.y) > abs(imu.g.z))
  {
    if(imu.g.y>12000)
    {
      ins = 1;
    }
    else if(imu.g.y<-12000)
    {
      ins = 2;
    }
  }
  else
  {
    if(imu.g.z>9000)
    {
      ins = 4;
    }
    else if(imu.g.z<-9000)
    {
      ins = 3;
    }
  }

  time2 = millis() - time1;

  if(ins != 0)
  {
    delay(250);
    Serial.println(ins);
    Serial.println(imu.g.y);
    Serial.println(imu.g.z);
//    dis = 0;
  }
  else if (time2 >= 2500)
  {
    ins = 2;
    time1 = millis();
  }
  
//  Serial.println("loop exec");
  Serial.println(ins);
  T_main_loop() ;  
  
  delay(10);

}

//  u8g.firstPage();
//  do {
//    draw_block();
//    s();
//  } while( u8g.nextPage() );
